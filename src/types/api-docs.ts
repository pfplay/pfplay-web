/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/v1/user/info': {
    /** 유저 회원가입 및 로그인 */
    post: operations['userInfo'];
  };
  '/api/v1/play-list': {
    /** 플레이리스트 / 그랩 리스트 조회 */
    get: operations['getPlayList'];
    /** 플레이리스트 생성 */
    post: operations['create'];
  };
  '/api/v1/party-room/create': {
    /** 파티룸 생성 */
    post: operations['create_1'];
  };
  '/api/v1/guest/create': {
    /** 게스트 생성 */
    post: operations['createGuest'];
  };
  '/api/v1/user/profile': {
    /** 유저 마이 프로필 조회 */
    get: operations['getUserProfile'];
    /** 유저 마이 프로필 설정 */
    patch: operations['setUserProfile'];
  };
  '/api/v1/party-room/{id}': {
    /** 파티룸 수정 */
    patch: operations['updatePartyRoom'];
  };
  '/api/v1/user/jwt-auth-dummy': {
    get: operations['dummy'];
  };
  '/api/v1/party-room/list': {
    /** 파티룸 리스트 */
    get: operations['list'];
  };
  '/api/v1/party-room/join': {
    /** 파티룸 입장 */
    get: operations['join'];
  };
  '/api/v1/avatar/body-list': {
    /** Avatar body list 조회 */
    get: operations['getAllAvatarBodies'];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    TokenRequest: {
      accessToken?: string;
    };
    UserLoginSuccessResponse: {
      /** Format: int64 */
      id?: number;
      name?: string;
      /** @description 회원가입 여부 */
      registered?: boolean;
      /** @enum {string} */
      authority?: 'ROLE_USER' | 'ROLE_GUEST' | 'ROLE_WALLET_USER';
      accessToken?: string;
      userPermission?: components['schemas']['UserPermissionDto'];
      /**
       * @description 유저 프로필 업데이트 여부
       * @default false
       */
      profileUpdated?: boolean;
    };
    /** @description 기능 접근 권한 */
    UserPermissionDto: {
      /** @description 프로필 설정 */
      settingProfile?: boolean;
      /** @description 파티목록 화면 */
      showPartyListDisplay?: boolean;
      /** @description 메인 스테이 입장 */
      enterMainStage?: boolean;
      /** @description 채팅 */
      chat?: boolean;
      /** @description 플레이리스트 생성 */
      createPlayList?: boolean;
      /** @description DJ 대기열 등록 */
      createWaitDj?: boolean;
      /** @description 파티룸 입장 */
      enterPartyRoom?: boolean;
      /** @description 파티룸 생성 */
      createPartyRoom?: boolean;
      /** @description 계급 권한 */
      admin?: boolean;
      /** @description 계급 권한 */
      communityManager?: boolean;
      /** @description 계급 권한 */
      moderator?: boolean;
      /** @description 계급 권한 */
      clubber?: boolean;
      /** @description 계급 권한 */
      listener?: boolean;
    };
    /** @description Play list */
    PlayListCreateRequest: {
      /**
       * @description 이름
       * @example 나의 플레이리스트 1
       */
      name: string;
    };
    /** @description Playlist */
    PlayListCreateResponse: {
      /**
       * Format: int64
       * @description Playlist id
       * @example 1
       */
      id: number;
      /**
       * @description 이름
       * @example 나의 플레이리스트 1
       */
      name: string;
    };
    PartyRoomCreateRequest: {
      /**
       * @description 이름
       * @example 이름
       */
      name: string;
      /**
       * @description 소개
       * @example 소개
       */
      introduce?: string;
      /**
       * @description 도메인
       * @example song
       */
      domain?: string;
      /**
       * Format: int32
       * @description 디제잉 제한 시간
       * @example 3
       */
      limit?: number;
    };
    PartyRoomCreateAdminInfo: {
      profile?: string;
      userName?: string;
    };
    PartyRoomCreateResponse: {
      /** Format: int64 */
      id?: number;
      name?: string;
      introduce?: string;
      domain?: string;
      /** Format: int32 */
      djingLimit?: number;
      /**
       * @description 파티룸 타입
       * @enum {string}
       */
      type?: 'PARTY' | 'MAIN';
      /**
       * @description 파티룸 활성 상태
       * @enum {string}
       */
      status?: 'ACTIVE' | 'INACTIVE';
      admin?: components['schemas']['PartyRoomCreateAdminInfo'];
      partyRoomPermission?: components['schemas']['PartyRoomPermissionDto'];
      /** @description 파티룸 신규 생성 여부 */
      isNew?: boolean;
    };
    /** @description 파티룸 생성시 default 권한 */
    PartyRoomPermissionDto: {
      /**
       * @description 파티룸 권한
       * @enum {string}
       */
      authority?: 'ADMIN' | 'COMMUNITY_MANAGER' | 'MODERATOR' | 'CLUBBER' | 'LISTENER';
      /** @description 파티 정보 수정 */
      partyInfoFetch?: boolean;
      /** @description 파티룸 폐쇄 */
      partyClose?: boolean;
      /** @description 공지 작성/삭제/수정 */
      notice?: boolean;
      /** @description 클러버 권한 부여 */
      giveToClubber?: boolean;
      /** @description 채팅 삭제 */
      chatDelete?: boolean;
      /** @description 클러버 패널티 30초 채팅 금지 */
      chatLimitBanToClubber?: boolean;
      /** @description 클러버 패널티 30초 킥(재입장 가능) */
      kickToClubber?: boolean;
      /** @description 클러버 패널티 30초 킥(재입장 불가능) */
      banToClubber?: boolean;
      /** @description 채팅 차단 */
      chatBan?: boolean;
      /** @description DJ 대기열 잠금 */
      djWaitLock?: boolean;
      /** @description 신규 DJ 추가/삭제 */
      newDj?: boolean;
      /** @description 음악 스킵 */
      musicSkip?: boolean;
      /** @description 영상 길이 제한 */
      videoLengthLimit?: boolean;
    };
    GuestCreateRequest: {
      userAgent?: string;
    };
    GuestCreateResponse: {
      /** Format: int64 */
      id?: number;
      name?: string;
      registered?: boolean;
      /** @enum {string} */
      authority?: 'ROLE_USER' | 'ROLE_GUEST' | 'ROLE_WALLET_USER';
      accessToken?: string;
      userPermission?: components['schemas']['UserPermissionDto'];
    };
    /** @description 사용자 요청 데이터 */
    ProfileUpdateRequest: {
      /**
       * @description 사용자 닉네임
       * @example 홍길동
       */
      nickname: string;
      /**
       * @description 사용자 소개말
       * @example 안녕하세요
       */
      introduction: string;
      /**
       * @description 사용자 face url
       * @example https://assets.website-files.com/637be5d0f2736f32b8ad98cd/638e627f643cfa7dd56beb96_qIsIXihKZeVDop6AZWt1j6gxOnYZ_oGfr09PzlJDL_H4YWasvDrNuTXK8Qrmh0oL6ppWI3RaGU5vMif2gNwO38UdWWei4eZCNhbfdrVlm5qHV3zVYIk6qtBuFvdkoo0HexhmSmvn.jpeg
       */
      faceUrl?: string;
      /**
       * Format: int32
       * @description 사용자 body id
       * @example 1
       */
      bodyId?: number;
      /**
       * @description 사용자 지갑 주소
       * @example 0xabcdefg
       */
      walletAddress?: string;
    };
    PartyRoomUpdateRequest: {
      /**
       * @description 이름
       * @example 이름
       */
      name: string;
      /**
       * @description 소개
       * @example 소개
       */
      introduce?: string;
      /**
       * Format: int32
       * @description 디제잉 제한 시간
       * @example 3
       */
      limit?: number;
    };
    UserProfileResponse: {
      nickname?: string;
      introduction?: string;
      faceUrl?: string;
      /** Format: int32 */
      bodyId?: number;
      bodyUrl?: string;
      walletAddress?: string;
    };
    PlayListDto: {
      /**
       * Format: int64
       * @description Playlist id
       * @example 1
       */
      id: number;
      /**
       * Format: int32
       * @description Playlist order number
       * @example 1
       */
      orderNumber: number;
      /**
       * @description Playlist name
       * @example 나의 플레이리스트 1
       */
      name: string;
      /**
       * @description Playlist type
       * @example PLAYLIST
       * @enum {string}
       */
      type: 'PLAYLIST' | 'GRAB';
    };
    PlayListResponse: {
      data?: components['schemas']['PlayListDto'][];
    };
    /** @description Pagination */
    PaginationDto: {
      /**
       * Format: int32
       * @description 현재 페이지 번호
       */
      pageNumber?: number;
      /**
       * Format: int32
       * @description 페이지 크기
       */
      pageSize?: number;
      /**
       * Format: int32
       * @description 총 페이지 수
       */
      totalPages?: number;
      /**
       * Format: int64
       * @description 총 항목 수
       */
      totalElements?: number;
      /** @description 다음 존재 여부 */
      hasNext?: boolean;
    };
    /** @description 파티룸 참여자 리스트. ADMIN > CM > MOD 순으로 최대 3명 정렬 */
    Participant: {
      nickname?: string;
      faceUrl?: string;
    };
    /** @description 파티룸 홈화면 */
    PartyRoomHomeResultDto: {
      /**
       * Format: int64
       * @description 파티룸 id(pk)
       */
      roomId?: number;
      /** @description 파티룸 소개 */
      introduce?: string;
      /** @description 파티룸 제목 */
      name?: string;
      /** @description 파티룸 도메인 */
      domain?: string;
      /**
       * Format: date-time
       * @description 생성일
       */
      createdAt?: string;
      /**
       * Format: int64
       * @description 파티룸 참여 총 수
       */
      participantTotalCount?: number;
      /** @description 파티룸 참여자 리스트. ADMIN > CM > MOD 순으로 최대 3명 정렬 */
      participants?: components['schemas']['Participant'][];
    };
    PartyRoomHomeResultPaginationDto: {
      content?: components['schemas']['PartyRoomHomeResultDto'][];
      pagination?: components['schemas']['PaginationDto'];
    };
    /** @description 유저 기반 파티룸 권한 */
    PartyPermissionDto: {
      /** @description 공지 작성/삭제/수정 */
      notice?: boolean;
      authority?: string;
      /** @description 파티 정보 수정 */
      partyInfoFetch?: boolean;
      /** @description 파티룸 폐쇄 */
      partyClose?: boolean;
      /** @description 클러버 권한 부여 */
      giveToClubber?: boolean;
      /** @description 채팅 삭제 */
      chatDelete?: boolean;
      /** @description 클러버 패널티 30초 채팅 금지 */
      chatLimitBanToClubber?: boolean;
      /** @description 클러버 패널티 30초 킥(재입장 가능) */
      kickToClubber?: boolean;
      /** @description 클러버 패널티 30초 킥(재입장 불가능) */
      banToClubber?: boolean;
      /** @description 채팅 차단 */
      chatBan?: boolean;
      /** @description DJ 대기열 잠금 */
      djWaitLock?: boolean;
      /** @description 신규 DJ 추가/삭제 */
      newDj?: boolean;
      /** @description 음악 스킵 */
      musicSkip?: boolean;
      /** @description 영상 길이 제한 */
      videoLengthLimit?: boolean;
    };
    /** @description 파티룸 밴 */
    PartyRoomBanDto: {
      /**
       * Format: int64
       * @description 밴 pk
       */
      id?: number;
      /**
       * Format: int64
       * @description 밴 당한 유저 아이디
       */
      userId?: number;
      /** @description 밴 */
      ban?: boolean;
      /** @description 킥(30초 limit) */
      kick?: boolean;
      /** @description 채팅 차단 */
      chat?: boolean;
      /** @description 사유 */
      reason?: string;
      /**
       * @description 유저 롤
       * @enum {string}
       */
      authority?: 'ROLE_USER' | 'ROLE_GUEST' | 'ROLE_WALLET_USER';
    };
    /** @description 파티룸 */
    PartyRoomDto: {
      /** Format: int64 */
      id?: number;
      name?: string;
      createUser?: components['schemas']['UserDto'];
      introduce?: string;
      domain?: string;
      /** Format: int32 */
      djingLimit?: number;
      /**
       * @description 파티룸 타입
       * @enum {string}
       */
      type?: 'PARTY' | 'MAIN';
      /**
       * @description 파티룸 활성 상태
       * @enum {string}
       */
      status?: 'ACTIVE' | 'INACTIVE';
    };
    /** @description 파티룸 입장 */
    PartyRoomJoinResultDto: {
      /** @description 해당 파티룸 첫 접속 여부 */
      hasJoined?: boolean;
      partyRoom?: components['schemas']['PartyRoomDto'];
      partyPermission?: components['schemas']['PartyPermissionDto'];
      partyRoomBan?: components['schemas']['PartyRoomBanDto'];
    };
    /** @description 유저 */
    UserDto: {
      email?: string;
      nickname?: string;
      /** @description 소개 */
      introduction?: string;
      /** @enum {string} */
      authority?: 'ROLE_USER' | 'ROLE_GUEST' | 'ROLE_WALLET_USER';
      /** @description 지갑 연동 주소 */
      walletAddress?: string;
      /** Format: int32 */
      djScore?: number;
      /** Format: int32 */
      taskScore?: number;
      /** Format: int32 */
      bodyId?: number;
      faceUrl?: string;
    };
    /** @description Avatar Body */
    AvatarBodyDto: {
      /**
       * Format: int64
       * @description Avatar id
       * @example 1
       */
      id: number;
      /**
       * @description 타입
       * @example BASIC
       * @enum {string}
       */
      type: 'BASIC' | 'DJ' | 'REF' | 'ROOM';
      /**
       * @description 이름
       * @example 도깨비불
       */
      name: string;
      /**
       * @description image url
       * @example https://postfiles.pstatic.net/MjAyMzA3MjlfMTE3/MDAxNjkwNjE0MTc3MjUz.owpzAVyLyeWQNKejvnYsd7g4Qv9SPvwwzl6voUCAeZ0g.Re2hKthxs8iV4NJr2Ofd-4_DfiXe46GzvPfhrjftX3Eg.PNG.sylviuss/avatar_empty.png?type=w773
       */
      image: string;
      /**
       * Format: int32
       * @description 해금 포인트
       * @example 0
       */
      requiredPoint: number;
      /**
       * Format: int32
       * @description 보유 포인트
       * @example 0
       */
      myPoint: number;
      available?: boolean;
      uniform?: boolean;
    };
    AvatarBodyResponse: {
      avatarBodyList?: components['schemas']['AvatarBodyDto'][];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /** 유저 회원가입 및 로그인 */
  userInfo: {
    requestBody: {
      content: {
        'application/json': components['schemas']['TokenRequest'];
      };
    };
    responses: {
      /** @description 유저 회원가입 및 로그인 */
      default: {
        content: {
          '*/*': components['schemas']['UserLoginSuccessResponse'];
        };
      };
    };
  };
  /** 플레이리스트 / 그랩 리스트 조회 */
  getPlayList: {
    responses: {
      /** @description 플레이리스트 / 그랩 리스트 조회 성공 */
      200: {
        content: {
          'application/json': components['schemas']['PlayListResponse'];
        };
      };
    };
  };
  /** 플레이리스트 생성 */
  create: {
    requestBody: {
      content: {
        'application/json': components['schemas']['PlayListCreateRequest'];
      };
    };
    responses: {
      /** @description 플레이리스트 생성 성공 */
      201: {
        content: {
          'application/json': components['schemas']['PlayListCreateResponse'];
        };
      };
    };
  };
  /** 파티룸 생성 */
  create_1: {
    requestBody: {
      content: {
        'application/json': components['schemas']['PartyRoomCreateRequest'];
      };
    };
    responses: {
      /** @description 파티룸 생성 */
      default: {
        content: {
          '*/*': components['schemas']['PartyRoomCreateResponse'];
        };
      };
    };
  };
  /** 게스트 생성 */
  createGuest: {
    requestBody: {
      content: {
        'application/json': components['schemas']['GuestCreateRequest'];
      };
    };
    responses: {
      /** @description 게스트 생성 */
      default: {
        content: {
          'application/json': components['schemas']['GuestCreateResponse'];
        };
      };
    };
  };
  /** 유저 마이 프로필 조회 */
  getUserProfile: {
    responses: {
      /** @description 프로필 조회 성공 */
      200: {
        content: {
          '*/*': components['schemas']['UserProfileResponse'];
        };
      };
      /** @description 프로필 조회 실패 */
      500: {
        content: {
          '*/*': Record<string, never>;
        };
      };
    };
  };
  /** 유저 마이 프로필 설정 */
  setUserProfile: {
    requestBody: {
      content: {
        'application/json': components['schemas']['ProfileUpdateRequest'];
      };
    };
    responses: {
      /** @description 프로필 설정 성공 */
      200: {
        content: {
          '*/*': Record<string, never>;
        };
      };
      /** @description 프로필 설정 실패 */
      500: {
        content: {
          '*/*': Record<string, never>;
        };
      };
    };
  };
  /** 파티룸 수정 */
  updatePartyRoom: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PartyRoomUpdateRequest'];
      };
    };
    responses: {
      /** @description 파티룸 수정 */
      default: {
        content: {
          'application/json': components['schemas']['PartyRoomUpdateRequest'];
        };
      };
    };
  };
  dummy: {
    responses: {
      /** @description jwt 유저 인증 테스트. 게스트 jwt 접근 불가능 */
      default: {
        content: {
          '*/*': components['schemas']['UserLoginSuccessResponse'];
        };
      };
    };
  };
  /** 파티룸 리스트 */
  list: {
    parameters: {
      query?: {
        page?: number;
        size?: number;
      };
    };
    responses: {
      /** @description 파티룸 리스트 */
      default: {
        content: {
          'application/json': components['schemas']['PartyRoomHomeResultPaginationDto'];
        };
      };
    };
  };
  /** 파티룸 입장 */
  join: {
    parameters: {
      query: {
        id: number;
      };
    };
    responses: {
      /** @description 파티룸 입장 */
      default: {
        content: {
          'application/json': components['schemas']['PartyRoomJoinResultDto'];
        };
      };
    };
  };
  /** Avatar body list 조회 */
  getAllAvatarBodies: {
    responses: {
      /** @description 조회 성공 */
      200: {
        content: {
          '*/*': components['schemas']['AvatarBodyResponse'];
        };
      };
    };
  };
}
